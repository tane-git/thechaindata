# server {
#     listen               80;
#     # ssl_certificate      /etc/nginx/conf.d/localhost.crt;
#     # ssl_certificate_key  /etc/nginx/conf.d/localhost.key;
#     # ssl_ciphers          HIGH:!aNULL:!MD5;
#     # ssl_protocols       TLSv1 TLSv1.1 TLSv1.2;
#     server_name  console.lvh.me;

#     location / {
#         proxy_pass http://docker.for.mac.localhost:4000;
#         proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
#         proxy_set_header X-Forwarded-Proto $scheme;
#         proxy_set_header X-Real-IP $remote_addr;
#         proxy_set_header Host $http_host;
#     }
# }

# FIX VITE WSS:
# server {
#   listen 3000;
#   server_name wss://local.thechaindata.com;

#   location / {
#     proxy_pass wss://docker.for.mac.localhost:3000;
#     proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
#     proxy_set_header X-Forwarded-Proto $scheme;
#     proxy_set_header X-Real-IP $remote_addr;
#     proxy_set_header Host $http_host;
#   }
# }

# Still trying to fix VITE WSS
# server { 
#   listen 443 wss;
#   server_name local.thechaindata.com;

#   local / {
#     proxy_pass wss://docker.for.mac.localhost:3000;
#     # proxy_pass http://docker.for.mac.localhost:3000;
#     proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
#     proxy_set_header X-Forwarded-Proto $scheme;
#     proxy_set_header X-Real-IP $remote_addr;
#     proxy_set_header Host $http_host;
#   }
# }

# server {
#   listen 3000;
#   server_name local.thechaindata.com;
#   return 301 https://$host$request_uri;
# }
server { 
  listen  80;
  server_name local.thechaindata.com;
  return 301 https://$host$request_uri;
}
server {
    listen               443 ssl;
    ssl_certificate      /etc/nginx/conf.d/server.crt;
    ssl_certificate_key  /etc/nginx/conf.d/server.key;
    ssl_ciphers          HIGH:!aNULL:!MD5;
    ssl_protocols       TLSv1 TLSv1.1 TLSv1.2;
    server_name  local.thechaindata.com;

    location / {
        proxy_pass http://docker.for.mac.localhost:3000;
        # proxy_pass http://localhost:3000;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header Host $http_host;
        # header things required for wss: 
        # proxy_set_header Upgrade $http_upgrade;
        # proxy_set_header Connection $http_connection;
        # proxy_set_header Connection "Upgrade";
    }
}

# server {
#   listen 3000;
#   listen [::]:3000;
#   server_name local.thechaindata.com;

#   location /socket/ {
#     proxy_http_version 1.1; 
#     # proxy_set_header Upgrade $http_upgrade;
#     proxy_set_header Connection $http_connection;
#     proxy_set_header Connection "Upgrade";

#     # proxy_pass http://docker.for.mac.localhost:3000;
#     proxy_pass ws://docker.for.mac.localhost:3000;
#     # proxy_pass ws://localhost:3000/
#   }
# }

# server {
#     listen               80;
#     # ssl_certificate      /etc/nginx/conf.d/localhost.crt;
#     # ssl_certificate_key  /etc/nginx/conf.d/localhost.key;
#     # ssl_ciphers          HIGH:!aNULL:!MD5;
#     # ssl_protocols       TLSv1 TLSv1.1 TLSv1.2;
#     server_name  localconsole.thechaindata.com;

#     location / {
#         proxy_pass http://docker.for.mac.localhost:4000;
#         proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
#         proxy_set_header X-Forwarded-Proto $scheme;
#         proxy_set_header X-Real-IP $remote_addr;
#         proxy_set_header Host $http_host;
#     }
# }

# server {
#     listen               80;
#     # ssl_certificate      /etc/nginx/conf.d/localhost.crt;
#     # ssl_certificate_key  /etc/nginx/conf.d/localhost.key;
#     # ssl_ciphers          HIGH:!aNULL:!MD5;
#     # ssl_protocols       TLSv1 TLSv1.1 TLSv1.2;
#     server_name  api.lvh.me;

#     location / {
#         proxy_pass https://api.thechaindata.com;
#         proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
#         proxy_set_header X-Forwarded-Proto $scheme;
#         proxy_set_header X-Real-IP $remote_addr;
#         proxy_set_header Host $http_host;
#     }
# }